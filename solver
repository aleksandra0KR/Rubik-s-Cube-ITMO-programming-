#include "cube.h"

void Cube::flower(){
    while(up[0][1] != WHITE or up[1][0] != WHITE or up[1][2] != WHITE or up[2][1] != WHITE){

        if (front[1][2] == WHITE) {
            while (up[1][2] == WHITE) {
                this->up_rotation_90();
            }
            this->right_rotation_90();
        }

        if (front[1][0] == WHITE) {
            while (up[1][0] == WHITE) {
                this->up_rotation_90();
            }
            this->left_rotation_against_90();
        }

        if (right[1][0] == WHITE) {
            while (up[2][1] == WHITE) {
                this->up_rotation_90();
            }
            this->front_rotation_against_90();
        }

        if (right[1][2] == WHITE) {
            while (up[0][1] == WHITE) {
                this->up_rotation_90();
            }

            this->back_rotation_90();
        }

        if (left[1][2] == WHITE) {
            while (up[2][1] == WHITE) {
                this->up_rotation_90();
            }
            this->front_rotation_90();
        }

        if (left[1][0] == WHITE) {
            while (up[0][1] == WHITE) {
                this->up_rotation_90();
            }
            this->back_rotation_against_90();
        }

        if (back[1][2] == WHITE) {
            while (up[1][2] == WHITE) {
                this->up_rotation_90();
            }
            this->right_rotation_against_90();
        }

        if (back[1][0] == WHITE) {
            while (up[1][0]== WHITE) {
                this->up_rotation_90();
            }
            this->left_rotation_90();
        }
        if (down[1][2] == WHITE) {
            while (up[1][2] == WHITE) {
                this->up_rotation_90();
            }
            for(int i = 0; i < 2; i++) this->right_rotation_90();
        }

        if (down[2][1] == WHITE) {
            while (up[0][1] == WHITE) {
                this->up_rotation_90();
            }
            for(int i = 0; i < 2; i++)  this->back_rotation_against_90();
        }

        if (down[1][0] == WHITE) {
            while (up[1][0] == WHITE) {
                this->up_rotation_90();
            }
            for(int i = 0; i < 2; i++)  this->left_rotation_against_90();
        }


        if (down[0][1] == WHITE) {
            while (up[2][1] == WHITE) {
                this->up_rotation_90();
            }
            for(int i = 0; i < 2; i++)  this->front_rotation_90();
        }


        if (front[2][1] == WHITE) {
            this->front_rotation_90();
            while (up[1][0] == WHITE) {
                this->up_rotation_90();
            }
            this->left_rotation_against_90();
        }

        if (front[0][1] == WHITE) {
            this->front_rotation_90();
            while (up[1][2] == WHITE) {
                this->up_rotation_90();
            }
            this->right_rotation_90();
        }


        if (right[2][1] == WHITE) {
            this->right_rotation_90();
            while (up[2][1] == WHITE){
                this->up_rotation_90();}
            this->front_rotation_against_90();
        }

        if (right[0][1] == WHITE) {
            this->right_rotation_90();
            while (up[0][1] == WHITE){
                this->up_rotation_90();}
            this->back_rotation_90();
        }

        if (back[0][1] == WHITE) {
            this->back_rotation_against_90();
            while (up[1][0] == WHITE) {
                this->up_rotation_90();
            }
            this->left_rotation_90();
        }

        if (back[2][1] == WHITE) {
            this->back_rotation_against_90();
            while (up[1][2] == WHITE){
                this->up_rotation_90();
            }
            this->right_rotation_against_90();
        }


        if (left[2][1] == WHITE) {
            this->left_rotation_against_90();
            while (up[2][1] == WHITE) {
                this->up_rotation_90();
            }
            this->front_rotation_90();
        }

        if (left[0][1] == WHITE) {
            this->left_rotation_against_90();
            while (up[0][1] == WHITE) {
                this->up_rotation_90();
            }
            this->back_rotation_against_90();
        }
    }
}

void Cube::right_cross() {
    while (front[0][1] != front[1][1] or up[2][1] != WHITE){
        this->up_rotation_90();
        break;
    }
    for(int i = 0; i < 2; i++) {
        this->front_rotation_90();
    }

    while (right[0][1] != right[1][1] or up[1][2] != WHITE){
        this->up_rotation_90();
    }
    for(int i = 0; i < 2; i++) {
        this->right_rotation_90();
    }

    while (back[2][1] != back[1][1] or up[0][1] != WHITE){
        this->up_rotation_90();
    }
    for(int i = 0; i < 2; i++) {
        back_rotation_90();
    }

    while (left[0][1] != left[1][1] or up[1][0] != WHITE){
        this->up_rotation_90();
    }
    for(int i = 0; i < 2; i++) {
        this->left_rotation_90();
    }
    return;
}


bool Cube::cornerCheck() {
    return ((up[2][2] == 4 && front[0][2] == 0 && right[0][0] == 3) || (up[2][2] == 4 && front[0][2] == 3 && right[0][0] == 0) ||
            (up[2][2] == 0 && front[0][2] == 4 && right[0][0] == 3) || (up[2][2] == 0 && front[0][2] == 3 && right[0][0] == 4) ||
            (up[2][2] == 3 && front[0][2] == 0 && right[0][0] == 4) || (up[2][2] == 3 && front[0][2] == 4 && right[0][0] == 0)) &&
           ((front[0][0] == 0 && left[0][2] == 2 && up[2][0] == 4) || (front[0][0] == 0 && left[0][2] == 4 && up[2][0] == 2) ||
            (front[0][0] == 2 && left[0][2] == 4 && up[2][0] == 0) || (front[0][0] == 2 && left[0][2] == 0 && up[2][0] == 4) ||
            (front[0][0] == 4 && left[0][2] == 2 && up[2][0] == 0) || (front[0][0] == 4 && left[0][2] == 0 && up[2][0] == 2)) &&
           ((up[0][2] == 4 && right[0][2] == 3 && back[2][2] == 1) || (up[0][2] == 4 && right[0][2] == 1 && back[2][2] == 3) ||
            (up[0][2] == 3 && right[0][2] == 4 && back[2][2] == 1) || (up[0][2] == 3 && right[0][2] == 1 && back[2][2] == 4) ||
            (up[0][2] == 1 && right[0][2] == 3 && back[2][2] == 4) || (up[0][2] == 1 && right[0][2] == 4 && back[2][2] == 3)) &&
           ((up[0][0] == 4 && back[2][0] == 1 && left[0][0] == 2) || (up[0][0] == 4 && back[2][0] == 2 && left[0][0] == 1) ||
            (up[0][0] == 2 && back[2][0] == 1 && left[0][0] == 4) || (up[0][0] == 2 && back[2][0] == 4 && left[0][0] == 1) ||
            (up[0][0] == 1 && back[2][0] == 4 && left[0][0] == 2) || (up[0][0] == 1 && back[2][0] == 2 && left[0][0] == 4));
}

